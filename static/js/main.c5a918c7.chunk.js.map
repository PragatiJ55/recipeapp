{"version":3,"sources":["recipe.module.css","recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","url","index","className","style","recipe","map","ingredient","key","text","href","target","textDecoration","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","a","fetch","response","json","data","hits","console","log","getRecipes","onSubmit","event","preventDefault","type","value","onChange","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,IAAM,oBAAoB,YAAc,8B,qNCsBzGC,EApBA,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,MAAOC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,YAAoBC,GAAU,EAAjBC,MAAiB,EAAVD,KAC5D,OACE,yBAAKE,UAAWC,IAAMC,QACpB,4BAAKR,GACL,wCAAcC,GACd,uBAAGK,UAAWC,IAAMJ,aAApB,eACA,4BACGA,EAAYM,KAAI,SAACC,EAAYL,GAAb,OACf,wBAAIM,IAAKN,GAAQK,EAAWE,UAGhC,uBAAGC,KAAMT,EAAKU,OAAO,SAASC,eAAe,QAC3C,4BAAQT,UAAWC,IAAMH,KAAzB,WAGF,yBAAKY,IAAKd,EAAOe,IAAI,GAAGX,UAAWC,IAAML,UC+ChCgB,EA7DH,WACV,IADgB,EAIcC,mBAAS,IAJvB,mBAITC,EAJS,KAIAC,EAJA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAQUJ,mBAAS,YARnB,mBAQTK,EARS,KAQFC,EARE,KAWhBC,qBAAU,YACQ,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSJ,EADT,mBAZjB,WAYiB,oBAXhB,qCAUK,cACXK,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBV,EAAWU,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANA,2CAAH,qDAQhBG,KACC,CAACX,IAWJ,OACE,yBAAKlB,UAAU,OACb,0BAAMA,UAAU,cAAc8B,SAPhB,SAACC,GACjBA,EAAMC,iBACNb,EAASH,KAML,2BACEiB,KAAK,OACLjC,UAAU,aACVkC,MAAOlB,EACPmB,SAhBa,SAACJ,GACpBd,EAAUc,EAAMvB,OAAO0B,UAiBnB,4BAAQD,KAAK,SAASjC,UAAU,iBAAhC,WAIF,yBAAKA,UAAU,WACZc,EAAQX,KAAI,SAACD,EAAQH,GAAT,OACX,kBAAC,EAAD,CACEM,IAAKN,EACLL,MAAOQ,EAAOA,OAAOkC,MACrBzC,SAAUO,EAAOA,OAAOP,SACxBC,MAAOM,EAAOA,OAAON,MACrBC,YAAaK,EAAOA,OAAOL,YAC3BC,IAAKI,EAAOA,OAAOJ,YC7CXuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.c5a918c7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__ccmXV\",\"image\":\"recipe_image__31yUD\",\"url\":\"recipe_url__JVqBc\",\"ingredients\":\"recipe_ingredients__3Lmr1\"};","import React from \"react\";\r\nimport style from \"./recipe.module.css\";\r\n\r\nconst Recipe = ({ title, calories, image, ingredients, index, url }) => {\r\n  return (\r\n    <div className={style.recipe}>\r\n      <h1>{title}</h1>\r\n      <p>Calories: {calories}</p>\r\n      <p className={style.ingredients}>Ingredients</p>\r\n      <ul>\r\n        {ingredients.map((ingredient, index) => (\r\n          <li key={index}>{ingredient.text}</li>\r\n        ))}\r\n      </ul>\r\n      <a href={url} target=\"_blank\" textDecoration=\"none\">\r\n        <button className={style.url}>Recipe</button>\r\n      </a>\r\n\r\n      <img src={image} alt=\"\" className={style.image}></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Recipe from \"./recipe\";\n\nconst App = () => {\n  const APP_ID = \"1c22f0d5\";\n  const APP_KEY = \"3d1cf1abf0b07d16eaf2b76edb5c56fc\";\n\n  const [recipes, setRecipes] = useState([]);\n\n  const [search, setSearch] = useState(\"\");\n\n  const [query, setQuery] = useState(\"potatoes\");\n\n  //you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.\n  useEffect(() => {\n    const getRecipes = async () => {\n      const response = await fetch(\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n      const data = await response.json();\n      setRecipes(data.hits);\n      console.log(data.hits);\n    };\n    getRecipes();\n  }, [query]);\n\n  const updateSearch = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const getSearch = (event) => {\n    event.preventDefault();\n    setQuery(search);\n  };\n\n  return (\n    <div className=\"App\">\n      <form className=\"search-form\" onSubmit={getSearch}>\n        <input\n          type=\"text\"\n          className=\"search-bar\"\n          value={search}\n          onChange={updateSearch}\n        ></input>\n        <button type=\"submit\" className=\"search-button\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map((recipe, index) => (\n          <Recipe\n            key={index}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            url={recipe.recipe.url}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}